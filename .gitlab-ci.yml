# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For pushing of release images to work, the following envionment variables have
# to set in the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

variables:
  # Project variables
  RELEASE_REGISTRY: index.docker.io/magentaaps
  # CI images
  PROXY_IMAGE: ${CI_REGISTRY_IMAGE}/proxy:${CI_COMMIT_SHA}
  FRONTEND_IMAGE: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA}
  BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHA}
  # Release image names
  PROXY_RELEASE_IMAGE_NAME: ${RELEASE_REGISTRY}/os2phonebook-proxy
  FRONTEND_RELEASE_IMAGE_NAME: ${RELEASE_REGISTRY}/os2phonebook-frontend
  BACKEND_RELEASE_IMAGE_NAME: ${RELEASE_REGISTRY}/os2phonebook-backend


stages:
  - lint
  - build
  - test
  - prerelease
  - release

# Lint stage
#############

.lint-default:
  stage: lint
  needs: []
  image: python:3
  services: []

Lint Python:
  extends: .lint-default
  before_script:
    - pip3 install -r os2phonebook_backend/requirements/lint.txt
  script:
    - cd os2phonebook_backend
    - flake8 --version
    - flake8
    - black --version
    - black --check --line-length 79 .

Lint Dockerfiles:
  extends: .lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

# Disabled for now
.REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

Lint shell scripts:
  extends: .lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck

# Disabled for now
.Lint frontend:
  extends: .lint-default
  image: node:14-slim
  before_script:
    - cd os2phonebook_frontend
    - npm install
  script:
    - npm run lint

# Build stage
#############

.build_docker_base:
  stage: build
  needs: []
  image:
    # We use the `:debug` image as it contains `sh` needed by gitlab-ci.
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  services: []
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context=${CI_PROJECT_DIR}
      --dockerfile=${DOCKERFILE}
      --destination=${CI_IMAGE}
      --cache=true


build_proxy_docker:
  extends: .build_docker_base
  before_script:
    - export DOCKERFILE="docker/Dockerfile.proxy"
    - export CI_IMAGE="${PROXY_IMAGE}"
  rules:
    # Only ever create release containers on git tags
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never


build_frontend_docker:
  extends: .build_docker_base
  before_script:
    - export DOCKERFILE="docker/Dockerfile.frontend"
    - export CI_IMAGE="${FRONTEND_IMAGE}"


build_backend_docker:
  extends: .build_docker_base
  before_script:
    - export DOCKERFILE="docker/Dockerfile.backend"
    - export CI_IMAGE="${BACKEND_IMAGE}"


# Test stage
############

test_backend:
  stage: test
  needs:
    - build_backend_docker
  image:
    name: ${BACKEND_IMAGE}
    entrypoint: [""]
  before_script:
    - pip3 install -r os2phonebook_backend/requirements/test.txt
  script:
    - pytest

# Prerelease stage
##################

generate_tags:
  stage: prerelease
  needs: []
  image: magentaaps/semantic-versioning-image-builder:latest
  script:
    - python3 -m semvertool "${CI_COMMIT_TAG}" > tags.txt
    - cat tags.txt
  artifacts:
    paths:
    - tags.txt
  rules:
    # Only ever create release containers on git tags
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never

# Release stage
###############

.release_base:
  stage: release
  image: alpine
  script:
    - apk add skopeo
    - cat tags.txt | xargs -I TAG skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${CI_IMAGE}"
      "docker://${RELEASE_IMAGE_NAME}:TAG"
  rules:
    # Only ever create release containers on git tags
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never


release_proxy:
  extends: .release_base
  before_script:
    - export CI_IMAGE="${PROXY_IMAGE}"
    - export RELEASE_IMAGE_NAME="${PROXY_RELEASE_IMAGE_NAME}"
  dependencies:
    - build_proxy_docker
    - generate_tags


release_frontend:
  extends: .release_base
  before_script:
    - export CI_IMAGE="${FRONTEND_IMAGE}"
    - export RELEASE_IMAGE_NAME="${FRONTEND_RELEASE_IMAGE_NAME}"
  dependencies:
    - build_frontend_docker
    - generate_tags


release_backend:
  extends: .release_base
  before_script:
    - export CI_IMAGE="${BACKEND_IMAGE}"
    - export RELEASE_IMAGE_NAME="${BACKEND_RELEASE_IMAGE_NAME}"
  dependencies:
    - build_backend_docker
    - generate_tags
